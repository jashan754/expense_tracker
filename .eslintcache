[{"D:\\desktop\\expensetracker\\src\\index.js":"1","D:\\desktop\\expensetracker\\src\\App.js":"2","D:\\desktop\\expensetracker\\src\\context\\context.js":"3","D:\\desktop\\expensetracker\\src\\context\\contextreducer.js":"4","D:\\desktop\\expensetracker\\src\\components\\Details\\Details.jsx":"5","D:\\desktop\\expensetracker\\src\\components\\Main\\Main.jsx":"6","D:\\desktop\\expensetracker\\src\\useTransactions.js":"7","D:\\desktop\\expensetracker\\src\\components\\Details\\styles.js":"8","D:\\desktop\\expensetracker\\src\\components\\Main\\styles.js":"9","D:\\desktop\\expensetracker\\src\\components\\Main\\Form\\Form.jsx":"10","D:\\desktop\\expensetracker\\src\\components\\Main\\List\\List.jsx":"11","D:\\desktop\\expensetracker\\src\\constants\\categories.js":"12","D:\\desktop\\expensetracker\\src\\components\\Main\\List\\styles.js":"13","D:\\desktop\\expensetracker\\src\\utils\\formatdate.js":"14","D:\\desktop\\expensetracker\\src\\components\\Snackbar\\Snackbar.jsx":"15","D:\\desktop\\expensetracker\\src\\components\\Snackbar\\styles.js":"16","C:\\Users\\HP\\Desktop\\expensetracker\\src\\index.js":"17","C:\\Users\\HP\\Desktop\\expensetracker\\src\\App.js":"18","C:\\Users\\HP\\Desktop\\expensetracker\\src\\context\\context.js":"19","C:\\Users\\HP\\Desktop\\expensetracker\\src\\context\\contextreducer.js":"20","C:\\Users\\HP\\Desktop\\expensetracker\\src\\components\\Main\\Main.jsx":"21","C:\\Users\\HP\\Desktop\\expensetracker\\src\\components\\Details\\Details.jsx":"22","C:\\Users\\HP\\Desktop\\expensetracker\\src\\components\\Main\\styles.js":"23","C:\\Users\\HP\\Desktop\\expensetracker\\src\\components\\Details\\styles.js":"24","C:\\Users\\HP\\Desktop\\expensetracker\\src\\useTransactions.js":"25","C:\\Users\\HP\\Desktop\\expensetracker\\src\\components\\Main\\List\\List.jsx":"26","C:\\Users\\HP\\Desktop\\expensetracker\\src\\components\\Main\\Form\\Form.jsx":"27","C:\\Users\\HP\\Desktop\\expensetracker\\src\\constants\\categories.js":"28","C:\\Users\\HP\\Desktop\\expensetracker\\src\\components\\Main\\List\\styles.js":"29","C:\\Users\\HP\\Desktop\\expensetracker\\src\\utils\\formatdate.js":"30","C:\\Users\\HP\\Desktop\\expensetracker\\src\\components\\Snackbar\\Snackbar.jsx":"31","C:\\Users\\HP\\Desktop\\expensetracker\\src\\components\\Snackbar\\styles.js":"32","C:\\Users\\HP\\Desktop\\epxense2\\src\\index.js":"33","C:\\Users\\HP\\Desktop\\epxense2\\src\\App.js":"34","C:\\Users\\HP\\Desktop\\epxense2\\src\\context\\context.js":"35","C:\\Users\\HP\\Desktop\\epxense2\\src\\context\\contextreducer.js":"36","C:\\Users\\HP\\Desktop\\epxense2\\src\\components\\Details\\Details.jsx":"37","C:\\Users\\HP\\Desktop\\epxense2\\src\\components\\Main\\Main.jsx":"38","C:\\Users\\HP\\Desktop\\epxense2\\src\\components\\Main\\styles.js":"39","C:\\Users\\HP\\Desktop\\epxense2\\src\\useTransactions.js":"40","C:\\Users\\HP\\Desktop\\epxense2\\src\\components\\Details\\styles.js":"41","C:\\Users\\HP\\Desktop\\epxense2\\src\\components\\Main\\Form\\Form.jsx":"42","C:\\Users\\HP\\Desktop\\epxense2\\src\\components\\Main\\List\\List.jsx":"43","C:\\Users\\HP\\Desktop\\epxense2\\src\\constants\\categories.js":"44","C:\\Users\\HP\\Desktop\\epxense2\\src\\components\\Main\\List\\styles.js":"45","C:\\Users\\HP\\Desktop\\epxense2\\src\\utils\\formatdate.js":"46","C:\\Users\\HP\\Desktop\\epxense2\\src\\components\\Snackbar\\Snackbar.jsx":"47","C:\\Users\\HP\\Desktop\\epxense2\\src\\components\\Snackbar\\styles.js":"48"},{"size":246,"mtime":1736329328313,"results":"49","hashOfConfig":"50"},{"size":8897,"mtime":1735926380176,"results":"51","hashOfConfig":"50"},{"size":925,"mtime":1735926380691,"results":"52","hashOfConfig":"50"},{"size":572,"mtime":1735926380691,"results":"53","hashOfConfig":"50"},{"size":813,"mtime":1736329453347,"results":"54","hashOfConfig":"50"},{"size":1156,"mtime":1735926380690,"results":"55","hashOfConfig":"50"},{"size":4133,"mtime":1735926380692,"results":"56","hashOfConfig":"50"},{"size":554,"mtime":1735926380688,"results":"57","hashOfConfig":"50"},{"size":514,"mtime":1735926380691,"results":"58","hashOfConfig":"50"},{"size":25732,"mtime":1735926381912,"results":"59","hashOfConfig":"50"},{"size":1531,"mtime":1736361612718,"results":"60","hashOfConfig":"50"},{"size":1695,"mtime":1735926380691,"results":"61","hashOfConfig":"50"},{"size":416,"mtime":1735926380690,"results":"62","hashOfConfig":"50"},{"size":374,"mtime":1735926380692,"results":"63","hashOfConfig":"50"},{"size":823,"mtime":1736328447404,"results":"64","hashOfConfig":"50"},{"size":204,"mtime":1735926380691,"results":"65","hashOfConfig":"50"},{"size":246,"mtime":1736459751624,"results":"66","hashOfConfig":"67"},{"size":8897,"mtime":1735926380176,"results":"68","hashOfConfig":"67"},{"size":925,"mtime":1735926380691,"results":"69","hashOfConfig":"67"},{"size":593,"mtime":1736462898664,"results":"70","hashOfConfig":"67"},{"size":1156,"mtime":1735926380690,"results":"71","hashOfConfig":"67"},{"size":819,"mtime":1736460849018,"results":"72","hashOfConfig":"67"},{"size":514,"mtime":1735926380691,"results":"73","hashOfConfig":"67"},{"size":554,"mtime":1736460643295,"results":"74","hashOfConfig":"67"},{"size":4133,"mtime":1735926380692,"results":"75","hashOfConfig":"67"},{"size":1531,"mtime":1736361612718,"results":"76","hashOfConfig":"67"},{"size":25737,"mtime":1736463410141,"results":"77","hashOfConfig":"67"},{"size":1695,"mtime":1735926380691,"results":"78","hashOfConfig":"67"},{"size":416,"mtime":1735926380690,"results":"79","hashOfConfig":"67"},{"size":374,"mtime":1735926380692,"results":"80","hashOfConfig":"67"},{"size":856,"mtime":1736461176193,"results":"81","hashOfConfig":"67"},{"size":204,"mtime":1735926380691,"results":"82","hashOfConfig":"67"},{"size":246,"mtime":1736459751624,"results":"83","hashOfConfig":"84"},{"size":8897,"mtime":1735926380176,"results":"85","hashOfConfig":"84"},{"size":925,"mtime":1735926380691,"results":"86","hashOfConfig":"84"},{"size":593,"mtime":1736462898664,"results":"87","hashOfConfig":"84"},{"size":819,"mtime":1736460849018,"results":"88","hashOfConfig":"84"},{"size":1156,"mtime":1735926380690,"results":"89","hashOfConfig":"84"},{"size":514,"mtime":1735926380691,"results":"90","hashOfConfig":"84"},{"size":4133,"mtime":1735926380692,"results":"91","hashOfConfig":"84"},{"size":554,"mtime":1736460643295,"results":"92","hashOfConfig":"84"},{"size":25737,"mtime":1736463410141,"results":"93","hashOfConfig":"84"},{"size":1531,"mtime":1736361612718,"results":"94","hashOfConfig":"84"},{"size":1695,"mtime":1735926380691,"results":"95","hashOfConfig":"84"},{"size":416,"mtime":1735926380690,"results":"96","hashOfConfig":"84"},{"size":374,"mtime":1735926380692,"results":"97","hashOfConfig":"84"},{"size":856,"mtime":1736461176193,"results":"98","hashOfConfig":"84"},{"size":204,"mtime":1735926380691,"results":"99","hashOfConfig":"84"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"1dgs1yf",{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"102"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"102"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},"r9bcyv",{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"sl0jrm",{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\desktop\\expensetracker\\src\\index.js",[],["200","201"],"D:\\desktop\\expensetracker\\src\\App.js",[],"D:\\desktop\\expensetracker\\src\\context\\context.js",[],"D:\\desktop\\expensetracker\\src\\context\\contextreducer.js",[],"D:\\desktop\\expensetracker\\src\\components\\Details\\Details.jsx",[],"D:\\desktop\\expensetracker\\src\\components\\Main\\Main.jsx",[],"D:\\desktop\\expensetracker\\src\\useTransactions.js",[],"D:\\desktop\\expensetracker\\src\\components\\Details\\styles.js",[],"D:\\desktop\\expensetracker\\src\\components\\Main\\styles.js",[],"D:\\desktop\\expensetracker\\src\\components\\Main\\Form\\Form.jsx",["202","203"],"// import React,{useState,useContext,useEffect} from 'react'\r\n// import { TextField, Typography , Grid,Button,FormControl,InputLabel,Select,MenuItem} from '@material-ui/core';\r\n// import useStyles from './styles';\r\n// import { Expensetrackercontext } from '../../../context/context';\r\n// import {v4 as uuidv4} from 'uuid';\r\n// import { incomeCategories,expenseCategories }from '../../../constants/categories';\r\n// import formatdate from '../../../utils/formatdate';\r\n// import SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\r\n// const initialstate={\r\n//     amount:'',\r\n//     category:'',\r\n//     type:'Income',\r\n//     date: formatdate(new Date()),\r\n// }\r\n\r\n// const Form = () => {\r\n//     const classes= useStyles();\r\n//     const [formData,setFormData]=useState(initialstate);\r\n//     const selectedcat = formData.type === \"Income\" ? incomeCategories : expenseCategories;\r\n\r\n//     const {addtransaction}=useContext(Expensetrackercontext);\r\n//     const create=()=>{\r\n//         const trans={...formData,amount:Number(formData.amount),id:uuidv4()}\r\n//        addtransaction(trans);\r\n//        setFormData(initialstate);\r\n//     }\r\n//     const { transcript, resetTranscript } = useSpeechRecognition();\r\n//     const handleTranscriptChange = (e) => {\r\n//         setFormData({ ...formData, category: e.target.value });\r\n//       };\r\n    \r\n//       useEffect(() => {\r\n//         setFormData((prevFormData) => ({ ...prevFormData, category: transcript }));\r\n//       }, [transcript]);\r\n    \r\n//       const startListening = () => SpeechRecognition.startListening();\r\n    \r\n//       if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\r\n//         return <div>Your browser does not support speech recognition.</div>;\r\n//       }\r\n//   return (<Grid container spacing ={2} >\r\n    \r\n//     <Grid item xs={12}>\r\n//         <Typography variant=\"subtitle2\" align=\"center\" gutterBottom>\r\n//         {transcript}\r\n//         </Typography>\r\n\r\n//     </Grid>\r\n//     <Grid item xs={12}>\r\n//         <FormControl fullWidth>\r\n//             <InputLabel>type</InputLabel>\r\n//             <Select value={formData.type}onChange={(e)=>{setFormData({...formData,type:e.target.value})}}>\r\n//                 <MenuItem value=\"Income\">Income</MenuItem>\r\n//                 <MenuItem value=\"Expense\">Expense</MenuItem>\r\n//             </Select>\r\n//         </FormControl>\r\n\r\n//     </Grid>\r\n//     <Grid item xs={6}>\r\n//         <FormControl fullWidth>\r\n//             <InputLabel>Category</InputLabel>\r\n//             <Select value={formData.category}onChange={(e)=>{setFormData({...formData,category:e.target.value})}}>\r\n//             {selectedcat && selectedcat.map((item) => (\r\n//               <MenuItem key={item.type} value={item.type}>\r\n//                 {item.type}\r\n//               </MenuItem>\r\n//             ))}\r\n//             </Select>\r\n\r\n//             </FormControl>\r\n\r\n//     </Grid>\r\n//     <Grid item xs={6} >\r\n//         <TextField type=\"number\" label=\"Amount\" fullWidth value={formData.amount}onChange={(e)=>{setFormData({...formData,amount:e.target.value})}}/>\r\n//     </Grid>\r\n//     <Grid item xs={6} >\r\n//         <TextField type=\"date\" label=\"Date\" fullWidth value={formData.date}onChange={(e)=>{setFormData({...formData,date:formatdate(e.target.value)})}}/>\r\n//     </Grid>\r\n//     <Button className={classes.button} variant='outlined'color=\"primary\" fullWidth onClick={create}> create</Button>\r\n//   </Grid>\r\n   \r\n//   )\r\n// }\r\n\r\n// export default Form\r\n\r\n\r\n\r\n\r\n// import React, { useState, useContext, useEffect } from 'react';\r\n// import { TextField, Typography, Grid, Button, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\r\n// import { makeStyles } from '@material-ui/core/styles';\r\n// import { Expensetrackercontext } from '../../../context/context';\r\n// import { v4 as uuidv4 } from 'uuid';\r\n// import { incomeCategories, expenseCategories } from '../../../constants/categories';\r\n// import formatdate from '../../../utils/formatdate';\r\n// import SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\r\n\r\n// const useStyles = makeStyles((theme) => ({\r\n//   button: {\r\n//     marginTop: theme.spacing(2),\r\n//   },\r\n// }));\r\n\r\n// const initialState = {\r\n//   amount: '',\r\n//   category: '',\r\n//   type: 'Income',\r\n//   date: formatdate(new Date()),\r\n// };\r\n\r\n// const Form = () => {\r\n//   const classes = useStyles();\r\n//   const [formData, setFormData] = useState(initialState);\r\n//   const selectedCategories = formData.type === 'Income' ? incomeCategories : expenseCategories;\r\n//   const { addTransaction } = useContext(Expensetrackercontext);\r\n\r\n//   const { transcript, resetTranscript } = useSpeechRecognition();\r\n//   const { listening, finalTranscript, reset } = useSpeechRecognition();\r\n\r\n//   const createTransaction = () => {\r\n//     const transaction = { ...formData, amount: Number(formData.amount), id: uuidv4() };\r\n//     addTransaction(transaction);\r\n//     setFormData(initialState);\r\n//   };\r\n\r\n//   const handleTranscriptChange = (e) => {\r\n//     setFormData({ ...formData, category: e.target.value });\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     setFormData((prevFormData) => ({ ...prevFormData, category: transcript }));\r\n//   }, [transcript]);\r\n\r\n//   const startListening = () => SpeechRecognition.startListening();\r\n\r\n//   useEffect(() => {\r\n//     if (finalTranscript) {\r\n//       // Mock segment object for the purpose of this example\r\n//       const segment = {\r\n//         intent: { intent: '' }, // Default empty intent\r\n//         entities: [],\r\n//         isFinal: true,\r\n//       };\r\n\r\n//       // Mock parsing of finalTranscript\r\n//       if (finalTranscript.toLowerCase().includes('expense')) {\r\n//         segment.intent.intent = 'add_expense';\r\n//       } else if (finalTranscript.toLowerCase().includes('income')) {\r\n//         segment.intent.intent = 'add_income';\r\n//       } else if (finalTranscript.toLowerCase().includes('create')) {\r\n//         segment.intent.intent = 'create_transaction';\r\n//       } else if (finalTranscript.toLowerCase().includes('cancel')) {\r\n//         segment.intent.intent = 'cancel_transaction';\r\n//       }\r\n\r\n//       // Mock entity extraction for the purpose of this example\r\n//       const amountMatch = finalTranscript.match(/(\\d+)/);\r\n//       if (amountMatch) {\r\n//         segment.entities.push({ type: 'amount', value: amountMatch[0] });\r\n//       }\r\n//       const categoryMatch = finalTranscript.match(/(food|rent|salary|groceries|utilities)/i);\r\n//       if (categoryMatch) {\r\n//         segment.entities.push({ type: 'category', value: categoryMatch[0] });\r\n//       }\r\n//       const dateMatch = finalTranscript.match(/(\\d{4}-\\d{2}-\\d{2})/);\r\n//       if (dateMatch) {\r\n//         segment.entities.push({ type: 'date', value: dateMatch[0] });\r\n//       }\r\n\r\n//       // Processing the segment object\r\n//       if (segment.intent.intent === 'add_expense') {\r\n//         setFormData((prev) => ({ ...prev, type: 'Expense' }));\r\n//       } else if (segment.intent.intent === 'add_income') {\r\n//         setFormData((prev) => ({ ...prev, type: 'Income' }));\r\n//       } else if (segment.isFinal && segment.intent.intent === 'create_transaction') {\r\n//         createTransaction();\r\n//       } else if (segment.isFinal && segment.intent.intent === 'cancel_transaction') {\r\n//         setFormData(initialState);\r\n//       }\r\n\r\n//       segment.entities.forEach((s) => {\r\n//         const category = `${s.value.charAt(0).toUpperCase()}${s.value.slice(1).toLowerCase()}`;\r\n//         switch (s.type) {\r\n//           case 'amount':\r\n//             setFormData((prev) => ({ ...prev, amount: s.value }));\r\n//             break;\r\n//           case 'category':\r\n//             if (incomeCategories.map((iC) => iC.type).includes(category)) {\r\n//               setFormData((prev) => ({ ...prev, type: 'Income', category }));\r\n//             } else if (expenseCategories.map((iC) => iC.type).includes(category)) {\r\n//               setFormData((prev) => ({ ...prev, type: 'Expense', category }));\r\n//             }\r\n//             break;\r\n//           case 'date':\r\n//             setFormData((prev) => ({ ...prev, date: s.value }));\r\n//             break;\r\n//           default:\r\n//             break;\r\n//         }\r\n//       });\r\n\r\n//       if (segment.isFinal && formData.amount && formData.category && formData.type && formData.date) {\r\n//         createTransaction();\r\n//       }\r\n//     }\r\n//   }, [finalTranscript]);\r\n\r\n\r\n//   if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\r\n//     return <div>Your browser does not support speech recognition.</div>;\r\n//   }\r\n\r\n//   return (\r\n//     <Grid container spacing={2}>\r\n//       <Grid item xs={12}>\r\n//         <Typography variant=\"subtitle2\" align=\"center\" gutterBottom>\r\n//           {transcript}\r\n//         </Typography>\r\n//       </Grid>\r\n//       <Grid item xs={12}>\r\n//         <FormControl fullWidth>\r\n//           <InputLabel>Type</InputLabel>\r\n//           <Select value={formData.type} onChange={(e) => setFormData({ ...formData, type: e.target.value })}>\r\n//             <MenuItem value=\"Income\">Income</MenuItem>\r\n//             <MenuItem value=\"Expense\">Expense</MenuItem>\r\n//           </Select>\r\n//         </FormControl>\r\n//       </Grid>\r\n//       <Grid item xs={6}>\r\n//         <FormControl fullWidth>\r\n//           <InputLabel>Category</InputLabel>\r\n//           <Select value={formData.category} onChange={handleTranscriptChange}>\r\n//             {selectedCategories.map((item) => (\r\n//               <MenuItem key={item.type} value={item.type}>\r\n//                 {item.type}\r\n//               </MenuItem>\r\n//             ))}\r\n//           </Select>\r\n//         </FormControl>\r\n//       </Grid>\r\n//       <Grid item xs={6}>\r\n//         <TextField\r\n//           type=\"number\"\r\n//           label=\"Amount\"\r\n//           fullWidth\r\n//           value={formData.amount}\r\n//           onChange={(e) => setFormData({ ...formData, amount: e.target.value })}\r\n//         />\r\n//       </Grid>\r\n//       <Grid item xs={6}>\r\n//         <TextField\r\n//           type=\"date\"\r\n//           label=\"Date\"\r\n//           fullWidth\r\n//           value={formData.date}\r\n//           onChange={(e) => setFormData({ ...formData, date: formatdate(e.target.value) })}\r\n//         />\r\n//       </Grid>\r\n//       <Grid item xs={12}>\r\n//         <Button className={classes.button} variant=\"outlined\" color=\"primary\" fullWidth onClick={createTransaction}>\r\n//           Create\r\n//         </Button>\r\n//       </Grid>\r\n//       <Grid item xs={12}>\r\n//         <Button className={classes.button} variant=\"outlined\" color=\"secondary\" fullWidth onClick={startListening}>\r\n//           Start Listening\r\n//         </Button>\r\n//       </Grid>\r\n//     </Grid>\r\n//   );\r\n// };\r\n\r\n// export default Form;\r\n\r\n\r\n// import React, { useState, useContext, useEffect } from 'react';\r\n// import { TextField, Typography, Grid, Button, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\r\n// import { makeStyles } from '@material-ui/core/styles';\r\n// import { Expensetrackercontext } from '../../../context/context';\r\n// import { v4 as uuidv4 } from 'uuid';\r\n// import { incomeCategories, expenseCategories } from '../../../constants/categories';\r\n// import formatdate from '../../../utils/formatdate';\r\n// import SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\r\n\r\n// const useStyles = makeStyles((theme) => ({\r\n//   button: {\r\n//     marginTop: theme.spacing(2),\r\n//   },\r\n// }));\r\n\r\n// const initialState = {\r\n//   amount: '',\r\n//   category: '',\r\n//   type: 'Income',\r\n//   date: formatdate(new Date()),\r\n// };\r\n// const Form = () => {\r\n//     const classes = useStyles();\r\n//     const [formData, setFormData] = useState(initialState);\r\n//     const selectedCategories = formData.type === 'Income' ? incomeCategories : expenseCategories;\r\n//     const { addtransaction } = useContext(Expensetrackercontext);\r\n  \r\n//     const { transcript, resetTranscript, finalTranscript } = useSpeechRecognition();\r\n  \r\n//     const createTransaction = () => {\r\n//       const transaction = { ...formData, amount: Number(formData.amount), id: uuidv4() };\r\n//       addtransaction(transaction);\r\n//       setFormData(initialState);\r\n//       resetTranscript(); // reset the transcript after creating the transaction\r\n//       SpeechRecognition.stopListening(); // stop listening after creating the transaction\r\n//     };\r\n  \r\n//     useEffect(() => {\r\n//       if (finalTranscript) {\r\n//         const segment = {\r\n//           intent: { intent: '' },\r\n//           entities: [],\r\n//           isFinal: true,\r\n//         };\r\n  \r\n//         if (finalTranscript.toLowerCase().includes('expense')) {\r\n//           segment.intent.intent = 'add_expense';\r\n//         } else if (finalTranscript.toLowerCase().includes('income')) {\r\n//           segment.intent.intent = 'add_income';\r\n//         } else if (finalTranscript.toLowerCase().includes('create')) {\r\n//           segment.intent.intent = 'create_transaction';\r\n//         } else if (finalTranscript.toLowerCase().includes('cancel')) {\r\n//           segment.intent.intent = 'cancel_transaction';\r\n//         }\r\n  \r\n//         const amountMatch = finalTranscript.match(/(\\d+)/);\r\n//         if (amountMatch) {\r\n//           segment.entities.push({ type: 'amount', value: amountMatch[0] });\r\n//         }\r\n//         const categoryMatch = finalTranscript.match(/(food|rent|salary|groceries|utilities)/i);\r\n//         if (categoryMatch) {\r\n//           segment.entities.push({ type: 'category', value: categoryMatch[0] });\r\n//         }\r\n//         const dateMatch = finalTranscript.match(/(\\d{4}-\\d{2}-\\d{2})/);\r\n//         if (dateMatch) {\r\n//           segment.entities.push({ type: 'date', value: dateMatch[0] });\r\n//         }\r\n  \r\n//         if (segment.intent.intent === 'add_expense') {\r\n//           setFormData((prev) => ({ ...prev, type: 'Expense' }));\r\n//         } else if (segment.intent.intent === 'add_income') {\r\n//           setFormData((prev) => ({ ...prev, type: 'Income' }));\r\n//         } else if (segment.isFinal && segment.intent.intent === 'create_transaction') {\r\n//           createTransaction();\r\n//         } else if (segment.isFinal && segment.intent.intent === 'cancel_transaction') {\r\n//           setFormData(initialState);\r\n//           SpeechRecognition.stopListening(); // stop listening after cancelling the transaction\r\n//         }\r\n  \r\n//         segment.entities.forEach((s) => {\r\n//           const category = `${s.value.charAt(0).toUpperCase()}${s.value.slice(1).toLowerCase()}`;\r\n//           switch (s.type) {\r\n//             case 'amount':\r\n//               setFormData((prev) => ({ ...prev, amount: s.value }));\r\n//               break;\r\n//             case 'category':\r\n//               if (incomeCategories.map((iC) => iC.type).includes(category)) {\r\n//                 setFormData((prev) => ({ ...prev, type: 'Income', category }));\r\n//               } else if (expenseCategories.map((iC) => iC.type).includes(category)) {\r\n//                 setFormData((prev) => ({ ...prev, type: 'Expense', category }));\r\n//               }\r\n//               break;\r\n//             case 'date':\r\n//               setFormData((prev) => ({ ...prev, date: formatdate(s.value) }));\r\n//               break;\r\n//             default:\r\n//               break;\r\n//           }\r\n//         });\r\n  \r\n//         if (segment.isFinal && formData.amount && formData.category && formData.type && formData.date) {\r\n//           createTransaction();\r\n//         }\r\n//       }\r\n//     }, [finalTranscript]);\r\n\r\n//   const startListening = () => SpeechRecognition.startListening();\r\n\r\n//   if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\r\n//     return <div>Your browser does not support speech recognition.</div>;\r\n//   }\r\n\r\n//   return (\r\n//     <Grid container spacing={2}>\r\n//       <Grid item xs={12}>\r\n//         <Typography variant=\"subtitle2\" align=\"center\" gutterBottom>\r\n//           {transcript}\r\n//         </Typography>\r\n//       </Grid>\r\n//       <Grid item xs={12}>\r\n//         <FormControl fullWidth>\r\n//           <InputLabel>Type</InputLabel>\r\n//           <Select value={formData.type} onChange={(e) => setFormData({ ...formData, type: e.target.value })}>\r\n//             <MenuItem value=\"Income\">Income</MenuItem>\r\n//             <MenuItem value=\"Expense\">Expense</MenuItem>\r\n//           </Select>\r\n//         </FormControl>\r\n//       </Grid>\r\n//       <Grid item xs={6}>\r\n//         <FormControl fullWidth>\r\n//           <InputLabel>Category</InputLabel>\r\n//           <Select value={formData.category} onChange={(e) => setFormData({ ...formData, category: e.target.value })}>\r\n//             {selectedCategories.map((item) => (\r\n//               <MenuItem key={item.type} value={item.type}>\r\n//                 {item.type}\r\n//               </MenuItem>\r\n//             ))}\r\n//           </Select>\r\n//         </FormControl>\r\n//       </Grid>\r\n//       <Grid item xs={6}>\r\n//         <TextField\r\n//           type=\"number\"\r\n//           label=\"Amount\"\r\n//           fullWidth\r\n//           value={formData.amount}\r\n//           onChange={(e) => setFormData({ ...formData, amount: e.target.value })}\r\n//         />\r\n//       </Grid>\r\n//       <Grid item xs={6}>\r\n//         <TextField\r\n//           type=\"date\"\r\n//           label=\"Date\"\r\n//           fullWidth\r\n//           value={formData.date}\r\n//           onChange={(e) => setFormData({ ...formData, date: formatdate(e.target.value) })}\r\n//         />\r\n//       </Grid>\r\n//       <Grid item xs={12}>\r\n//         <Button className={classes.button} variant=\"outlined\" color=\"primary\" fullWidth onClick={createTransaction}>\r\n//           Create\r\n//         </Button>\r\n//       </Grid>\r\n//       <Grid item xs={12}>\r\n//         <Button className={classes.button} variant=\"outlined\" color=\"secondary\" fullWidth onClick={startListening}>\r\n//           Start Listening\r\n//         </Button>\r\n//       </Grid>\r\n//     </Grid>\r\n//   );\r\n// };\r\n\r\n// export default Form;\r\n\r\n\r\nimport React, { useState, useContext, useEffect } from 'react';\r\nimport { TextField, Typography, Grid, Button, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Expensetrackercontext } from '../../../context/context';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { incomeCategories, expenseCategories } from '../../../constants/categories';\r\nimport formatdate from '../../../utils/formatdate';\r\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\r\nimport Customisedsnack from '../../Snackbar/Snackbar';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nconst initialState = {\r\n  amount: '',\r\n  category: '',\r\n  type: 'Income',\r\n  date: formatdate(new Date()),\r\n};\r\n\r\nconst Form = () => {\r\n  const classes = useStyles();\r\n  const [formData, setFormData] = useState(initialState);\r\n  const selectedCategories = formData.type === 'Income' ? incomeCategories : expenseCategories;\r\n  const { addtransaction } = useContext(Expensetrackercontext);\r\n  const [open,setOpen]=useState(false)\r\n  const { transcript, resetTranscript, finalTranscript } = useSpeechRecognition();\r\n\r\n  const createTransaction = () => {\r\n    const transaction = { ...formData, amount: Number(formData.amount), id: uuidv4() };\r\n    setOpen(true);\r\n    addtransaction(transaction);\r\n    setFormData(initialState);\r\n    resetTranscript(); // reset the transcript after creating the transaction\r\n    SpeechRecognition.stopListening(); // stop listening after creating the transaction\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (finalTranscript) {\r\n      const segment = {\r\n        intent: { intent: '' },\r\n        entities: [],\r\n        isFinal: true,\r\n      };\r\n  \r\n      if (finalTranscript.toLowerCase().includes('expense')) {\r\n        segment.intent.intent = 'add_expense';\r\n      } else if (finalTranscript.toLowerCase().includes('income')) {\r\n        segment.intent.intent = 'add_income';\r\n      } else if (finalTranscript.toLowerCase().includes('create')) {\r\n        segment.intent.intent = 'create_transaction';\r\n      } else if (finalTranscript.toLowerCase().includes('cancel')) {\r\n        segment.intent.intent = 'cancel_transaction';\r\n      }\r\n  \r\n      const amountMatch = finalTranscript.match(/(\\d+)/);\r\n      if (amountMatch) {\r\n        segment.entities.push({ type: 'amount', value: amountMatch[0] });\r\n      }\r\n  \r\n      const categoryMatch = finalTranscript.match(new RegExp(`(${incomeCategories.map(iC => iC.type).join('|')}|${expenseCategories.map(eC => eC.type).join('|')})`, 'i'));\r\n      if (categoryMatch) {\r\n        segment.entities.push({ type: 'category', value: categoryMatch[0].toLowerCase() });\r\n      }\r\n  \r\n      const dateMatch = finalTranscript.match(/(monday|tuesday|wednesday|thursday|friday|saturday|sunday)/i);\r\n      if (dateMatch) {\r\n        segment.entities.push({ type: 'date', value: dateMatch[0] });\r\n      }\r\n  \r\n      if (segment.intent.intent === 'add_expense') {\r\n        setFormData((prev) => ({ ...prev, type: 'Expense' }));\r\n      } else if (segment.intent.intent === 'add_income') {\r\n        setFormData((prev) => ({ ...prev, type: 'Income' }));\r\n      } else if (segment.isFinal && segment.intent.intent === 'create_transaction') {\r\n        createTransaction();\r\n      } else if (segment.isFinal && segment.intent.intent === 'cancel_transaction') {\r\n        setFormData(initialState);\r\n        SpeechRecognition.stopListening(); // stop listening after cancelling the transaction\r\n      }\r\n  \r\n      segment.entities.forEach((s) => {\r\n        switch (s.type) {\r\n          case 'amount':\r\n            setFormData((prev) => ({ ...prev, amount: s.value }));\r\n            break;\r\n          case 'category':\r\n            const matchedCategory = `${s.value.charAt(0).toUpperCase()}${s.value.slice(1).toLowerCase()}`;\r\n            if (incomeCategories.map((iC) => iC.type.toLowerCase()).includes(s.value.toLowerCase())) {\r\n              setFormData((prev) => ({ ...prev, type: 'Income', category: matchedCategory }));\r\n            } else if (expenseCategories.map((eC) => eC.type.toLowerCase()).includes(s.value.toLowerCase())) {\r\n              setFormData((prev) => ({ ...prev, type: 'Expense', category: matchedCategory }));\r\n            }\r\n            break;\r\n          case 'date':\r\n            const currentDate = new Date();\r\n            const dayOfWeek = s.value.toLowerCase();\r\n            const daysOfWeek = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\r\n            const today = currentDate.getDay();\r\n            const targetDay = daysOfWeek.indexOf(dayOfWeek);\r\n            const daysUntil = (targetDay - today + 7) % 7;\r\n            const targetDate = new Date(currentDate.setDate(currentDate.getDate() + daysUntil));\r\n            setFormData((prev) => ({ ...prev, date: formatdate(targetDate) }));\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      });\r\n  \r\n      // Create the transaction if all necessary data is present\r\n     \r\n    }\r\n  }, [finalTranscript]);\r\n  useEffect(() => {\r\n    if (formData.amount && formData.category && formData.type && formData.date) {\r\n      createTransaction();\r\n    }\r\n  }, [formData]);\r\n  const startListening = () => {\r\n    resetTranscript(); // Reset the transcript before starting to listen\r\n    SpeechRecognition.startListening();\r\n  };\r\n\r\n  if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\r\n    return <div>Your browser does not support speech recognition.</div>;\r\n  }\r\n\r\n  return (\r\n    <Grid container spacing={2}>\r\n        <Customisedsnack open={open} setOpen={setOpen}/>\r\n      <Grid item xs={12}>\r\n        <Typography variant=\"subtitle2\" align=\"center\" gutterBottom>\r\n          {transcript}\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <FormControl fullWidth>\r\n          <InputLabel>Type</InputLabel>\r\n          <Select value={formData.type} onChange={(e) => setFormData({ ...formData, type: e.target.value })}>\r\n            <MenuItem value=\"Income\">Income</MenuItem>\r\n            <MenuItem value=\"Expense\">Expense</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <FormControl fullWidth>\r\n          <InputLabel>Category</InputLabel>\r\n          <Select value={formData.category} onChange={(e) => setFormData({ ...formData, category: e.target.value })}>\r\n            {selectedCategories.map((item) => (\r\n              <MenuItem key={item.type} value={item.type}>\r\n                {item.type}\r\n              </MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <TextField\r\n          type=\"number\"\r\n          label=\"Amount\"\r\n          fullWidth\r\n          value={formData.amount}\r\n          onChange={(e) => setFormData({ ...formData, amount: e.target.value })}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <TextField\r\n          type=\"date\"\r\n          label=\"Date\"\r\n          fullWidth\r\n          value={formData.date}\r\n          onChange={(e) => setFormData({ ...formData, date: formatdate(e.target.value) })}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <Button className={classes.button} variant=\"outlined\" color=\"primary\" fullWidth onClick={createTransaction}>\r\n          Create\r\n        </Button>\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <Button className={classes.button} variant=\"outlined\" color=\"secondary\" fullWidth onClick={startListening}>\r\n          Start Listening\r\n        </Button>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","D:\\desktop\\expensetracker\\src\\components\\Main\\List\\List.jsx",[],"D:\\desktop\\expensetracker\\src\\constants\\categories.js",[],"D:\\desktop\\expensetracker\\src\\components\\Main\\List\\styles.js",[],"D:\\desktop\\expensetracker\\src\\utils\\formatdate.js",[],"D:\\desktop\\expensetracker\\src\\components\\Snackbar\\Snackbar.jsx",["204"],"import React from \"react\";\r\nimport { Snackbar } from \"@material-ui/core\";\r\nimport  MuiAlert from '@material-ui/lab/Alert'\r\nimport useStyles from './styles'\r\n\r\n\r\n\r\nconst Customisedsnack = ({open,setOpen}) => {\r\n    const classes=useStyles();\r\n    const handle=(event,reason)=>{\r\n        if(reason==='clickaway') return ;\r\n        setOpen(false)\r\n    }\r\n  return (\r\n    <div className=\"classes.root\">\r\n        <Snackbar\r\n            anchorOrigin={{vertical:'top',horixontal:'right'}}\r\n            open={true}\r\n            autoHideDuration={3000}\r\n            onClose={handle}\r\n            >\r\n                <MuiAlert onClose={handle} severity=\"success\" elevation={6} variant=\"filled\">\r\n                    Transaction successfully created</MuiAlert>\r\n        </Snackbar>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Customisedsnack","D:\\desktop\\expensetracker\\src\\components\\Snackbar\\styles.js",[],"C:\\Users\\HP\\Desktop\\expensetracker\\src\\index.js",[],["205","206"],"C:\\Users\\HP\\Desktop\\expensetracker\\src\\App.js",[],"C:\\Users\\HP\\Desktop\\expensetracker\\src\\context\\context.js",[],"C:\\Users\\HP\\Desktop\\expensetracker\\src\\context\\contextreducer.js",[],"C:\\Users\\HP\\Desktop\\expensetracker\\src\\components\\Main\\Main.jsx",[],"C:\\Users\\HP\\Desktop\\expensetracker\\src\\components\\Details\\Details.jsx",[],"C:\\Users\\HP\\Desktop\\expensetracker\\src\\components\\Main\\styles.js",[],"C:\\Users\\HP\\Desktop\\expensetracker\\src\\components\\Details\\styles.js",[],"C:\\Users\\HP\\Desktop\\expensetracker\\src\\useTransactions.js",[],"C:\\Users\\HP\\Desktop\\expensetracker\\src\\components\\Main\\List\\List.jsx",[],"C:\\Users\\HP\\Desktop\\expensetracker\\src\\components\\Main\\Form\\Form.jsx",["207","208"],"C:\\Users\\HP\\Desktop\\expensetracker\\src\\constants\\categories.js",[],"C:\\Users\\HP\\Desktop\\expensetracker\\src\\components\\Main\\List\\styles.js",[],"C:\\Users\\HP\\Desktop\\expensetracker\\src\\utils\\formatdate.js",[],"C:\\Users\\HP\\Desktop\\expensetracker\\src\\components\\Snackbar\\Snackbar.jsx",[],"C:\\Users\\HP\\Desktop\\expensetracker\\src\\components\\Snackbar\\styles.js",[],"C:\\Users\\HP\\Desktop\\epxense2\\src\\index.js",[],"C:\\Users\\HP\\Desktop\\epxense2\\src\\App.js",[],"C:\\Users\\HP\\Desktop\\epxense2\\src\\context\\context.js",[],"C:\\Users\\HP\\Desktop\\epxense2\\src\\context\\contextreducer.js",[],"C:\\Users\\HP\\Desktop\\epxense2\\src\\components\\Details\\Details.jsx",[],"C:\\Users\\HP\\Desktop\\epxense2\\src\\components\\Main\\Main.jsx",[],"C:\\Users\\HP\\Desktop\\epxense2\\src\\components\\Main\\styles.js",[],"C:\\Users\\HP\\Desktop\\epxense2\\src\\useTransactions.js",[],"C:\\Users\\HP\\Desktop\\epxense2\\src\\components\\Details\\styles.js",[],"C:\\Users\\HP\\Desktop\\epxense2\\src\\components\\Main\\Form\\Form.jsx",["209","210"],"C:\\Users\\HP\\Desktop\\epxense2\\src\\components\\Main\\List\\List.jsx",[],"C:\\Users\\HP\\Desktop\\epxense2\\src\\constants\\categories.js",[],"C:\\Users\\HP\\Desktop\\epxense2\\src\\components\\Main\\List\\styles.js",[],"C:\\Users\\HP\\Desktop\\epxense2\\src\\utils\\formatdate.js",[],"C:\\Users\\HP\\Desktop\\epxense2\\src\\components\\Snackbar\\Snackbar.jsx",[],"C:\\Users\\HP\\Desktop\\epxense2\\src\\components\\Snackbar\\styles.js",[],{"ruleId":"211","replacedBy":"212"},{"ruleId":"213","replacedBy":"214"},{"ruleId":"215","severity":1,"message":"216","line":567,"column":6,"nodeType":"217","endLine":567,"endColumn":23,"suggestions":"218"},{"ruleId":"215","severity":1,"message":"216","line":572,"column":6,"nodeType":"217","endLine":572,"endColumn":16,"suggestions":"219"},{"ruleId":"220","severity":1,"message":"221","line":9,"column":11,"nodeType":"222","messageId":"223","endLine":9,"endColumn":18},{"ruleId":"211","replacedBy":"224"},{"ruleId":"213","replacedBy":"225"},{"ruleId":"215","severity":1,"message":"216","line":568,"column":6,"nodeType":"217","endLine":568,"endColumn":23,"suggestions":"226"},{"ruleId":"215","severity":1,"message":"216","line":573,"column":6,"nodeType":"217","endLine":573,"endColumn":16,"suggestions":"227"},{"ruleId":"215","severity":1,"message":"216","line":568,"column":6,"nodeType":"217","endLine":568,"endColumn":23,"suggestions":"228"},{"ruleId":"215","severity":1,"message":"216","line":573,"column":6,"nodeType":"217","endLine":573,"endColumn":16,"suggestions":"229"},"no-native-reassign",["230"],"no-negated-in-lhs",["231"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'createTransaction'. Either include it or remove the dependency array.","ArrayExpression",["232"],["233"],"no-unused-vars","'classes' is assigned a value but never used.","Identifier","unusedVar",["230"],["231"],["234"],["235"],["236"],["237"],"no-global-assign","no-unsafe-negation",{"desc":"238","fix":"239"},{"desc":"240","fix":"241"},{"desc":"238","fix":"242"},{"desc":"240","fix":"243"},{"desc":"238","fix":"244"},{"desc":"240","fix":"245"},"Update the dependencies array to be: [createTransaction, finalTranscript]",{"range":"246","text":"247"},"Update the dependencies array to be: [createTransaction, formData]",{"range":"248","text":"249"},{"range":"250","text":"247"},{"range":"251","text":"249"},{"range":"252","text":"247"},{"range":"253","text":"249"},[23160,23177],"[createTransaction, finalTranscript]",[23325,23335],"[createTransaction, formData]",[23165,23182],[23330,23340],[23165,23182],[23330,23340]]